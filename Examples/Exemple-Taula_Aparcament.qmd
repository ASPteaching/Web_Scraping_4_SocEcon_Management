---
title: "LegoParsing"
author: "Alex SÃ¡nchez"
date: "`r Sys.Date()`"
output: html_document
---

# Presentation

Imagine we want to extract information from a certain movie on imdb, [The Lego Movie]("http://www.imdb.com/title/tt1490017/)

- Our goal is obtaining some specific informations such as
  - the _movie rating_
  - the _images_
  - the _cast_names_

# Data acquisition

Start getting the page and inspecting its contents.

```{r eval=TRUE, echo=TRUE}
library(rvest)
lego_movie <- read_html("http://www.imdb.com/title/tt1490017/")
```

  
# Parsing the data

- We start extracting the **movie rating**.

Now we have the data we need to figure out which *selector* matches the data we want. 

- Examining the page, with a text editor or using  *selectorgadget* we find that it is `strong span`
- We now:
  + use `html_element()` to find the first node that matches that selector, 
  + extract its contents with `html_text()`, and 
  + convert it to numeric with `as.numeric()`

```{r eval=FALSE, echo=TRUE}
rating <- lego_movie %>% 
  html_node("strong span") %>%
  html_text2() %>%
  as.numeric()
rating
```

---

# `rvest` by the example (3): keep parsing


- We can use a similar process to extract the images:

```{r eval=FALSE, echo=TRUE}
poster <- lego_movie %>%
  html_elements(".poster img") %>%
  html_attr("src")
poster
```

---

# `rvest` by the example (4): managing the unexpected

- Imagine we want to use a similar process to extract the cast, using `html_nodes()` to find all nodes that match the selector:

    + This example is based on the original "selectorgadget" vignette which used ".itemprop" as selector name to recover the names of the cast.
    + It seems that the wep page may have changed and this selector is not used anymore.
    + The item we look for is within a table so a reasonable selector is "td a", although it returns more contents than desired.
    + An alternative is to use "htmltable()" to recover the table that contains the cast.

---

# Extract cast names using `html_nodes()` and selectors

```{r eval=FALSE}
cast <- lego_movie %>%
  html_elements("td a") %>%
  html_text()
cast
```

Now we need to extract and clean the names.
Notice that we have selected several table's contents. An alternative would have been to start extracting the tables.

```{r eval=FALSE}
library(stringi)
castNames <- cast %>% 
  stri_locate(regex="\\n") 
namesPos<-which(!is.na(castNames[1:44,1]))
names<-cast[namesPos]
castNames2 <- substring(names,2, nchar(names)-1 )
castNames2
```

---

# Extract cast names using `html_tables()`

```{r eval=FALSE}
require(rvest)
tables <- html_table(lego_movie, fill = TRUE) #Parses tables into data frames
castTable<- tables[[1]]
castNames3 <- as.character(castTable[-1,2])
castNames3
```


---
